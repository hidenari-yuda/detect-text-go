// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/hidenari-yuda/paychan/interfaces"
	"github.com/hidenari-yuda/paychan/interfaces/handler"
	"github.com/hidenari-yuda/paychan/interfaces/repository"
	"github.com/hidenari-yuda/paychan/usecase"
	"github.com/hidenari-yuda/paychan/usecase/interactor"
)

// Injectors from wire.go:

// User
//
func InitializeUserHandler(db interfaces.SQLExecuter, fb usecase.Firebase) handler.UserHandler {
	userRepository := repository.NewUserRepositoryImpl(db)
	receiptPictureRepository := repository.NewReceiptPictureRepositoryImpl(db)
	receiptRepository := repository.NewReceiptRepositoryImpl(db)
	parchasedItemRepository := repository.NewParchasedItemRepositoryImpl(db)
	paymentMethodRepository := repository.NewPaymentMethodRepositoryImpl(db)
	presentRepository := repository.NewPresentRepositoryImpl(db)
	lineMessageRepository := repository.NewLineMessageRepositoryImpl(db)
	aspRepository := repository.NewAspRepositoryImpl(db)
	userInteractor := interactor.NewUserInteractorImpl(fb, userRepository, receiptPictureRepository, receiptRepository, parchasedItemRepository, paymentMethodRepository, presentRepository, lineMessageRepository, aspRepository)
	userHandler := handler.NewUserHandlerImpl(userInteractor)
	return userHandler
}

// Present
//
func InitializePresentHandler(db interfaces.SQLExecuter, fb usecase.Firebase) handler.PresentHandler {
	userRepository := repository.NewUserRepositoryImpl(db)
	receiptPictureRepository := repository.NewReceiptPictureRepositoryImpl(db)
	receiptRepository := repository.NewReceiptRepositoryImpl(db)
	parchasedItemRepository := repository.NewParchasedItemRepositoryImpl(db)
	paymentMethodRepository := repository.NewPaymentMethodRepositoryImpl(db)
	presentRepository := repository.NewPresentRepositoryImpl(db)
	lineMessageRepository := repository.NewLineMessageRepositoryImpl(db)
	aspRepository := repository.NewAspRepositoryImpl(db)
	presentInteractor := interactor.NewPresentInteractorImpl(fb, userRepository, receiptPictureRepository, receiptRepository, parchasedItemRepository, paymentMethodRepository, presentRepository, lineMessageRepository, aspRepository)
	presentHandler := handler.NewPresentHandlerImpl(presentInteractor)
	return presentHandler
}

// User
//
func InitializeUserInteractor(db interfaces.SQLExecuter, fb usecase.Firebase) interactor.UserInteractor {
	userRepository := repository.NewUserRepositoryImpl(db)
	receiptPictureRepository := repository.NewReceiptPictureRepositoryImpl(db)
	receiptRepository := repository.NewReceiptRepositoryImpl(db)
	parchasedItemRepository := repository.NewParchasedItemRepositoryImpl(db)
	paymentMethodRepository := repository.NewPaymentMethodRepositoryImpl(db)
	presentRepository := repository.NewPresentRepositoryImpl(db)
	lineMessageRepository := repository.NewLineMessageRepositoryImpl(db)
	aspRepository := repository.NewAspRepositoryImpl(db)
	userInteractor := interactor.NewUserInteractorImpl(fb, userRepository, receiptPictureRepository, receiptRepository, parchasedItemRepository, paymentMethodRepository, presentRepository, lineMessageRepository, aspRepository)
	return userInteractor
}

// Present
//
func InitializePresentInteractor(db interfaces.SQLExecuter, fb usecase.Firebase) interactor.PresentInteractor {
	userRepository := repository.NewUserRepositoryImpl(db)
	receiptPictureRepository := repository.NewReceiptPictureRepositoryImpl(db)
	receiptRepository := repository.NewReceiptRepositoryImpl(db)
	parchasedItemRepository := repository.NewParchasedItemRepositoryImpl(db)
	paymentMethodRepository := repository.NewPaymentMethodRepositoryImpl(db)
	presentRepository := repository.NewPresentRepositoryImpl(db)
	lineMessageRepository := repository.NewLineMessageRepositoryImpl(db)
	aspRepository := repository.NewAspRepositoryImpl(db)
	presentInteractor := interactor.NewPresentInteractorImpl(fb, userRepository, receiptPictureRepository, receiptRepository, parchasedItemRepository, paymentMethodRepository, presentRepository, lineMessageRepository, aspRepository)
	return presentInteractor
}

// wire.go:

var wireSet = wire.NewSet(handler.WireSet, interactor.WireSet, repository.WireSet)
